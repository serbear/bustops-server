{
	"info": {
		"_postman_id": "c14d9a02-0e03-4c1d-ae13-2ef97c376160",
		"name": "Stop Area Queries",
		"description": "# About this collection\n\nThis collection helps you set up contract tests to ensure that two separate systems are compatible and can communicate with one another.\n\n## **Using the collection**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n### Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)\n\n[  \n](https://postman.postman.co/documentation/24552533-5bead607-0197-4e1d-87d4-3160bc7631c1?entity=&branch=&version=)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12083506"
	},
	"item": [
		{
			"name": "All stop areas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validate that the response is json object",
							"pm.test(\"Response is a json object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"// Validate that the response has an arg object",
							"pm.test(\"Response to have 'arg' object\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('args');",
							"});",
							"",
							"// Validate that the response has headers object",
							"pm.test(\"Response to have 'headers' object\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('headers');",
							"});",
							"",
							"// Validate that the response has url property",
							"pm.test(\"Response to have 'url' property\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('url');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/allStopAreas",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"allStopAreas"
					]
				},
				"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
			},
			"response": []
		},
		{
			"name": "All stop areas by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Response Code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Run validations on response headers like Content-Type\r",
							"pm.test(\"Content-Type should be JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const json = pm.response.json();\r",
							"\r",
							"// The response body, including individual attributes can be evaluated for correctness\r",
							"pm.test(\"`args` should contain the correct query params\", function () {\r",
							"    pm.expect(json.args).to.be.an('object');\r",
							"    pm.expect(json.args.foo).to.eql('bar');\r",
							"    pm.expect(json.args.baz).to.eql('value');\r",
							"});\r",
							"\r",
							"// Non-trivial data types like Dates can also be tested against\r",
							"pm.test(\"Date in the header should be valid\", function () {\r",
							"    const parsedDate = new Date(pm.response.headers.get('Date'));\r",
							"    pm.expect(parsedDate).to.be.a('date');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Narva\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/stopAreasByName",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"stopAreasByName"
					]
				},
				"description": "The tests in the request validate the response code and the data returned in the response is the same as the one being sent."
			},
			"response": []
		},
		{
			"name": "All stops of the area",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Response Code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Run validations on response headers like Content-Type\r",
							"pm.test(\"Content-Type should be JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const json = pm.response.json();\r",
							"\r",
							"// The response body, including individual attributes can be evaluated for correctness\r",
							"pm.test(\"`args` should contain the correct query params\", function () {\r",
							"    pm.expect(json.args).to.be.an('object');\r",
							"    pm.expect(json.args.foo).to.eql('bar');\r",
							"    pm.expect(json.args.baz).to.eql('value');\r",
							"});\r",
							"\r",
							"// Non-trivial data types like Dates can also be tested against\r",
							"pm.test(\"Date in the header should be valid\", function () {\r",
							"    const parsedDate = new Date(pm.response.headers.get('Date'));\r",
							"    pm.expect(parsedDate).to.be.a('date');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Narva linn\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/areaStopsByAreaName",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"areaStopsByAreaName"
					]
				},
				"description": "The tests in the request validate the response code and the data returned in the response is the same as the one being sent."
			},
			"response": []
		},
		{
			"name": "Bus list for a specific stop in a specific region.",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stop_id\": 150464\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/busesForStopOfRegion",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"busesForStopOfRegion"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a specific stop description and coordinates",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stop_name\": \"Aa\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/stopDescription",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"stopDescription"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://postman-echo.com"
		}
	]
}